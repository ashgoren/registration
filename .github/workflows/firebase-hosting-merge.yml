name: Deploy to Firebase Hosting
on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:

jobs:
  build_and_deploy:
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') }}
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prd' || 'stg' }}
    env:
      DOPPLER_STAGE: ${{ (github.ref_name == 'main' && 'prd') || 'stg' }}
      IS_PRODUCTION: ${{ github.ref_name == 'main' && 'true' || 'false' }}
      VITE_ENV: ${{ github.ref_name == 'main' && 'prd' || 'stg' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Inject Frontend Secrets into Environment
        uses: dopplerhq/secrets-fetch-action@v1.3.0
        id: doppler
        with:
          doppler-token: ${{ secrets.DOPPLER_TOKEN_FRONTEND }}
          inject-env-vars: true

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v3
        with:
          credentials_json: '${{ secrets.GCP_SECRET_MANAGER_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v3

      - name: Sync Backend Secrets to GCP
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_BACKEND }}
        run: |
          doppler secrets download -c ${DOPPLER_STAGE}_backend --format=json --no-file > secrets.json
          gcloud secrets versions add backend --data-file=secrets.json
          rm secrets.json

      - name: Install Firebase Function Dependencies
        run: npm install
        working-directory: ./functions

      - name: Deploy Firebase Functions
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only functions --project ${{ vars.PROJECT_ID }}
        env:
          GCP_SA_KEY: ${{ secrets.FIREBASE_FUNCTIONS_SERVICE_ACCOUNT }}

      - name: Deploy Firestore indexes
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only firestore:indexes --project ${{ vars.PROJECT_ID }}
        env:
          GCP_SA_KEY: ${{ secrets.FIREBASE_FUNCTIONS_SERVICE_ACCOUNT }}

      - name: Build Project
        run: npm run build

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          projectId: '${{ vars.PROJECT_ID }}'
          channelId: live
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
